#include <WiFi.h>
#include <WebServer.h>
#include <Adafruit_NeoPixel.h>

#define LED_PIN 4       
#define NUM_LEDS 16     

// Definește SSID și parola rețelei Wi-Fi
const char* ssid = "DIGI_0993e8";
const char* password = "aa21f66c"; 

// Creează un obiect pentru serverul web
WebServer server(80);

// Creează un obiect pentru NeoPixel
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

// Variabilă pentru a indica dacă efectul de încărcare este activ
bool loadingActive = false;
int currentLED = 0;
uint32_t currentColor = 0; // Variabilă pentru a stoca culoarea curentă

void handleRoot() {
  String html = "<html>"
                "<head>"
                "<style>"
                "body { font-family: Arial, sans-serif; text-align: center; background: linear-gradient(to top, #4299e1, #ebf4ff); }"
                ".button { display: inline-block; padding: 20px 40px; font-size: 24px; margin: 10px; text-decoration: none; color: white; border-radius: 10px; }"
                ".error { background-color: red; }"
                ".success { background-color: green; }"
                ".warning { background-color: orange; }"
                ".loading { background-color: blue; }"
                ".logo { position: absolute; top: 20px; right: 20px; width: 150px; height: auto; }"
                ".stop-button { display: inline-block; padding: 20px 40px; font-size: 24px; margin: 10px; text-decoration: none; color: white; border-radius: 10px; background-color: black; }"
                "</style>"
                "</head>"
                "<body>"
                "<h1 style='margin-top: 50px;'>ESP32 Web Server</h1>"
                "<a href='/error' class='button error'>Error</a>"
                "<a href='/success' class='button success'>Success</a>"
                "<a href='/warning' class='button warning'>Warning</a>"
                "<a href='/loading' class='button loading'>Loading</a>"
                "<a href='/stop' class='stop-button'>Stop</a>"
                "<img src='https://reporter24.ro/wp-content/uploads/2021/06/ACE_logo5.png' class='logo'>"
                "</body>"
                "</html>";
  server.send(200, "text/html", html);

}

void setColor(uint32_t color) {
  for (int i = 0; i < NUM_LEDS; i++) {
    strip.setPixelColor(i, color);
  }
  strip.show();
  
  currentColor = color; // Actualizează culoarea curentă

  uint8_t r = (color >> 16) & 0xFF;
  uint8_t g = (color >>  8) & 0xFF;
  uint8_t b = (color      ) & 0xFF;
  Serial.print("Color set to: R=");
  Serial.print(r);
  Serial.print(" G=");
  Serial.print(g);
  Serial.print(" B=");
  Serial.println(b);
}

void handleError() {
  loadingActive = false;
  setColor(strip.Color(255, 0, 0)); // Roșu
  server.send(204, "text/html", ""); // 204 No Content pentru a nu schimba pagina
}

void handleSuccess() {
  loadingActive = false;
  setColor(strip.Color(0, 255, 0)); // Verde
  server.send(204, "text/html", ""); // 204 No Content pentru a nu schimba pagina
}

void handleWarning() {
  loadingActive = false;
  setColor(strip.Color(255, 255, 0)); // Galben
  server.send(204, "text/html", ""); // 204 No Content pentru a nu schimba pagina
}

void handleLoading() {
  // Stinge toate LED-urile
  setColor(strip.Color(0, 0, 0)); // Negru (oprit)
  loadingActive = true;
  server.send(204, "text/html", ""); // 204 No Content pentru a nu schimba pagina
}

void handleStop() {
  loadingActive = false;
  setColor(strip.Color(0, 0, 0)); // Negru (oprit)
  server.send(204, "text/html", ""); // 204 No Content pentru a nu schimba pagina
}

void handleWhite() {
  loadingActive = false;
  setColor(strip.Color(255, 255, 255)); // Alb
  server.send(204, "text/html", ""); 
} 

void handleGetStatus() {
  String status = "unknown";
  if (loadingActive) {
    status = "loading";
  } else {
    uint32_t color = currentColor;
    uint8_t r = (color >> 16) & 0xFF;
    uint8_t g = (color >>  8) & 0xFF;
    uint8_t b = (color      ) & 0xFF;
    Serial.print("Color: R=");
    Serial.print(r);
    Serial.print(" G=");
    Serial.print(g);
    Serial.print(" B=");
    Serial.println(b);

    if (r == 255 && g == 0 && b == 0) {
      status = "error";
    } else if (r == 0 && g == 255 && b == 0) {
      status = "success";
    } else if (r == 255 && g == 255 && b == 0) {
      status = "warning";
    } else if (r == 0 && g == 0 && b == 255) {
      status = "loading";
    } else if (r == 255 && g == 255 && b == 255) {
      status = "white";
    } else {
      status = "off";
    }
  }
  Serial.print("Status: ");
  Serial.println(status);
  server.send(200, "text/plain", status);
}

void setup() {
  Serial.begin(115200);
  strip.begin();
  strip.show(); 
  strip.setBrightness(50); 

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  Serial.print("ESP32 Web Server's IP address: ");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/error", handleError);
  server.on("/success", handleSuccess);
  server.on("/warning", handleWarning);
  server.on("/loading", handleLoading);
  server.on("/stop", handleStop);
  server.on("/white", handleWhite); 
  server.on("/getstatus", handleGetStatus); // Endpoint
  server.begin();
}

void loop() {
  server.handleClient();

  if (loadingActive) {
    strip.setPixelColor(currentLED, strip.Color(0, 0, 255)); // Albastru
    strip.show();
    delay(100);
    strip.setPixelColor(currentLED, strip.Color(0, 0, 0)); // Negru (oprit)
    currentLED = (currentLED + 1) % NUM_LEDS;
  }
}

